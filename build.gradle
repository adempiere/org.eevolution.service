plugins {
	id 'java-library'
	id 'maven-publish'
	id 'signing'
	id 'scala'
}

sourceCompatibility = 1.11
def baseVersion = '3.9.4'
def baseGroupId = 'io.github.adempiere'

repositories {
    mavenLocal()
    mavenCentral()
}

allprojects {
    tasks.withType(Javadoc) {
    	options.addStringOption('Xdoclint:none', '-quiet')
   	}
}

dependencies {
   api fileTree(
        dir: 'lib',
        include: [
            '*.jar'
        ]
    )
	//	Libraries
	api "org.scala-lang:scala3-library_3:3.0.1"
	api "commons-collections:commons-collections:3.2.2"
	//	ADempiere Core
	api "${baseGroupId}:base:${baseVersion}"
	api "${baseGroupId}:manufacturing:${baseVersion}"
}

sourceSets {
    main {
         java {
            srcDirs = ['org.eevolution.service-management/src/java']
         }
         scala {
            srcDirs = ['org.eevolution.service-management/src/scala']
         }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}


def entityType = 'D'
group = "io.github.adempiere"
version = findProperty("deployVersion") ?: "local-1.0.0"

jar {
	manifest {
		attributes(
			"Implementation-Title": "ADempiere Service Management",
			"Implementation-Version": version,
			"EntityType": entityType
		)
    }
}

publishing {
    repositories {
		mavenLocal()

        maven {
            url = findProperty("deployPublishUrl") ?: System.properties['deploy.publish_url']
            credentials {
                username = findProperty("deployUsername") ?: System.properties['deploy.user']
                password = findProperty("deployPassword") ?: System.properties['deploy.token']
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
			groupId = group
			artifactId = 'adempiere-service-management'
			version = version
           	from components.java
           	pom {
				name = 'ADempiere Service Management'
				description = 'Service Management This functionality allows the management of contracts, recurring billing, better integration of request management, expense and project management.'
                url = 'http://adempiere.io/'
                licenses {
                    license {
                        name = 'GNU General Public License, version 2'
                        url = 'https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'yamelsenih'
                        name = 'Yamel Senih'
                        email = 'ysenih@erpya.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/adempiere/org.eevolution.service.git'
                    developerConnection = 'scm:git:ssh://github.com/adempiere/org.eevolution.service.git'
                    url = 'http://github.com/adempiere/org.eevolution.service'
                }
            }
		}
	}
}


task cleanBuildPublishLocal(type: GradleBuild) {
	tasks = ['clean', 'build', 'publishToMavenLocal']
}


signing {
	def isReleaseVersion = !version.toString().startsWith("local") && !version.toString().endsWith("-SNAPSHOT")

	sign configurations.archives

	setRequired {
		// signing is required if this is a release version and the artifacts are to be published
		// do not use hasTask() as this require realization of the tasks that maybe are not necessary
		(isReleaseVersion || version.toString().equals("build")) && gradle.taskGraph.allTasks.any {
			it.equals(PublishToMavenRepository)
		}
	}
	def signingKey = findProperty("deploySigningKey")
    def signingPassword = findProperty("deploySigningPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}
